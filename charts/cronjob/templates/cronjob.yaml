{{- $top := . }}
{{- $dbHost := include "cronjob.postgresqlHost" . -}}
{{- range .Values.cronjobs }}
---
apiVersion: {{ include "common.capabilities.cronjob.apiVersion" $top }}
kind: CronJob
metadata:
  name: {{ printf "%s-%s" (include "common.names.fullname" $top) .name | trunc 52 | trimSuffix "-" | quote }}
  labels: {{- include "common.labels.standard" $top | nindent 4 }}
    cronjob: {{ .name | quote }}
    {{- if $top.Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $top.Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    {{- if $top.Values.fluidtruck.enabled }}
    {{- (include "common.labels.fluidtruck" $top) | nindent 4 }}
    {{- end }}
    {{- if $top.Values.github.enabled }}
    {{- (include "common.labels.github" $top) | nindent 4 }}
    {{- end }}
  {{- if or $top.Values.commonAnnotations $top.Values.github.enabled }}
  annotations:
    {{- if $top.Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" $top.Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
    {{- if $top.Values.github.enabled }}
    {{- (include "common.annotations.github" $top) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  schedule: {{ .schedule | quote }}
  concurrencyPolicy: {{ .concurrencyPolicy | quote }}
  successfulJobsHistoryLimit: {{ default "0" .successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ default "0" .failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels: {{- include "common.labels.standard" $top | nindent 12 }}
            {{- if $top.Values.fluidtruck.enabled }}
            {{- include "common.labels.fluidtruck" $top | nindent 12 }}
            {{- end }}
            {{- if $top.Values.github.enabled }}
            {{- include "common.labels.github" $top | nindent 12 }}
            {{- end }}
            cronjob: {{ .name | quote }}
          annotations:
            {{- if $top.Values.github.enabled }}
            {{- include "common.annotations.github" $top | nindent 12 }}
            {{- end }}
            {{- if $top.Values.vault.enabled }}
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-inject-status: "update"
            vault.hashicorp.com/agent-pre-populate-only: "true"
            vault.hashicorp.com/auth-type: "gcp"
            vault.hashicorp.com/auth-config-type: "iam"
            vault.hashicorp.com/auth-config-service-account: {{ $top.Values.vault.auth.serviceAccount | quote }}
            vault.hashicorp.com/role: {{ printf "%s-%s-%s" $top.Values.vault.auth.department $top.Values.vault.auth.team $top.Values.fluidtruck.env | quote }}
            vault.hashicorp.com/agent-inject-secret-newrelic: {{ printf "kv/data/%s/newrelic" $top.Values.vault.auth.department | quote }}
            {{ printf "vault.hashicorp.com/agent-inject-template-newrelic: |" }}
              {{ printf "{{- with secret \"kv/data/%s/newrelic\" -}}" $top.Values.vault.auth.department }}
              {{ printf "{{- range $k, $v := .Data.data -}}" }}
              {{ printf "export {{ $k }}=\"{{ $v }}\"" }}
              {{ printf "{{ end -}}" }}
              {{ printf "{{- end -}}" }}
            vault.hashicorp.com/agent-inject-secret-.env.shared: {{ printf "kv/data/%s/%s/shared" $top.Values.vault.auth.department $top.Values.vault.auth.team | quote }}
            {{ printf "vault.hashicorp.com/agent-inject-template-.env.shared: |" }}
              {{ printf "{{- with secret \"kv/data/%s/%s/shared\" -}}" $top.Values.vault.auth.department $top.Values.vault.auth.team }}
              {{ printf "{{- range $k, $v := .Data.data -}}" }}
              {{ printf "{{ $k }}=\"{{ $v }}\"" }}
              {{ printf "{{ end -}}" }}
              {{ printf "{{- end -}}" }}
            vault.hashicorp.com/agent-inject-secret-.env: {{ printf "kv/data/%s/%s/%s" $top.Values.vault.auth.department $top.Values.vault.auth.team $top.Values.fluidtruck.env | quote }}
            {{ printf "vault.hashicorp.com/agent-inject-template-.env: |" }}
              {{ printf "{{- with secret \"kv/data/%s/%s/%s\" -}}" $top.Values.vault.auth.department $top.Values.vault.auth.team $top.Values.fluidtruck.env }}
              {{ printf "{{- range $k, $v := .Data.data -}}" }}
              {{ printf "{{ $k }}=\"{{ $v }}\"" }}
              {{ printf "{{ end -}}" }}
              {{ printf "{{- end -}}" }}
            {{- range $top.Values.vault.secrets -}}
            {{- printf "vault.hashicorp.com/agent-inject-secret-%s: \"%s\"" .name .path | nindent 12 }}
            {{- printf "vault.hashicorp.com/agent-inject-template-%s: |" .name | nindent 12 }}
              {{ printf "{{- with secret \"%s\" -}}" .path }}
              {{ .value | default (printf "{{- range $k, $v := .Data.data -}}\n   export {{ $k }}=\"{{ $v }}\"\n{{ end -}}") | indent 14 | trim  }}
              {{ printf "{{- end -}}" }}
            {{- end }}
            {{- end }}
        spec:
          restartPolicy: OnFailure
          serviceAccountName: {{ template "cronjob.serviceAccountName" $top }}
          {{- if $top.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $top.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if or (eq "true" (include "cronjob.waitForRedis" $top)) (eq "true" (include "cronjob.waitForPostgresql" $top)) }}
          initContainers:
            {{- if eq "true" (include "cronjob.waitForRedis" $top) }}
            - name: wait-for-redis
              image: redis:alpine
              env:
                - name: REDIS_HOST
                  value: {{ include "cronjob.redisHost" $top }}
                - name: REDIS_PORT
                  value: "6379"
                - name: REDISCLI_AUTH
                  valueFrom:
                    secretKeyRef:
                      name: {{ $top.Release.Name }}-redis
                      key: redis-password
              args:
                - /mnt/redis/wait-for-redis.sh
              volumeMounts:
                - name: wait-for-redis
                  mountPath: /mnt/redis
            {{- end }}
            {{- if eq "true" (include "cronjob.waitForPostgresql" $top) }}
            - name: wait-for-postgresql
              image: postgres:alpine
              env:
                - name: DB_HOST
                  value: {{ include "cronjob.postgresqlHost" $top }}
                - name: DB_DATABASE
                  value: {{ $top.Values.postgresql.auth.database }}
                - name: DB_USER
                  value: {{ $top.Values.postgresql.auth.username }}
              args:
                - /mnt/postgresql/wait-for-postgresql.sh
              volumeMounts:
                - name: wait-for-postgresql
                  mountPath: /mnt/postgresql
            {{- end }}
          {{- end }}
          containers:
          - name: {{ .name | quote }}
            {{- if hasKey . "image" }}
            image: {{ include "common.images.image" (dict "imageRoot" .image) }}
            imagePullPolicy: {{ .image.pullPolicy | quote }}
            {{- else }}
            image: {{ template "cronjob.image" $top }}
            imagePullPolicy: {{ $top.Values.image.pullPolicy | quote }}
            {{- end }}
            {{- if typeIs "string" .command }}
            command:
              - sh
              - -c
              - {{ .command | quote }}
            {{- else }}
            command: {{- include "common.tplvalues.render" (dict "value" .command "context" $) | nindent 14 }}
            {{- end }}
            {{- if or $top.Values.redis.enabled (gt (len $top.Values.envVars) 0) }}
            env:
              {{- if $top.Values.redis.enabled }}
              - name: REDIS_HOST
                value: {{ include "cronjob.redisHost" $top }}
              - name: REDIS_PORT
                value: "6379"
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ $top.Release.Name }}-redis
                    key: redis-password
              {{- end }}
              {{- if $top.Values.postgresql.enabled }}
              - name: DB_HOST
                value: {{ $dbHost }}
              - name: DB_HOST_READ
                value: {{ $dbHost }}
              - name: DB_DATABASE
                value: {{ $top.Values.postgresql.auth.database }}
              - name: DB_USER
                value: {{ $top.Values.postgresql.auth.username }}
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ $top.Release.Name }}-postgresql
                    key: password
              - name: DB_URL
                value: postgres://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):5432/$(DB_DATABASE)?sslmode=disable
              - name: DB_URL_READ
                value: "$(DB_URL)"
              {{- end }}
              {{- if eq $top.Values.fluidtruck.env "dev" }}
              - name: NEW_RELIC_APP_NAME
                value: {{ printf "%s-%s" $top.Values.fluidtruck.app $top.Release.Name | quote }}
              {{- else }}
              - name: NEW_RELIC_APP_NAME
                value: {{ printf "%s-%s" $top.Values.fluidtruck.app $top.Values.fluidtruck.env | quote }}
              {{- end }}
              {{- if and $top.Values.fluidtruck.env (not $top.Values.envVars.ENV) }}
              - name: ENV
                value: {{ $top.Values.fluidtruck.env }}
              {{- end }}
              {{- range $key, $value := $top.Values.envVars }}
              - name: {{ $key }}
                {{- if or (typeIs "string" $value) (typeIs "float64" $value) (typeIs "bool" $value) }}
                value: {{ include "common.tplvalues.render" (dict "value" $value "context" $) | quote }}
                {{- else }}
                {{- include "common.tplvalues.render" (dict "value" $value "context" $) | nindent 14 }}
                {{- end }}
              {{- end }}
            {{- end }}
            {{- if or $top.Values.envVarsCM $top.Values.envVarsSecret }}
            envFrom:
              {{- if $top.Values.envVarsCM }}
              {{- if kindIs "string" $top.Values.envVarsCM }}
              - configMapRef:
                  name: {{ include "common.tplvalues.render" ( dict "value" $top.Values.envVarsCM "context" $ ) }}
              {{- else }}
              {{- range $value := $top.Values.envVarsCM }}
              - configMapRef:
                  name: {{ include "common.tplvalues.render" ( dict "value" $value "context" $ ) }}
              {{- end }}
              {{- end }}
              {{- end }}
              {{- if $top.Values.envVarsSecret }}
              {{- if kindIs "string" $top.Values.envVarsSecret }}
              - secretRef:
                  name: {{ include "common.tplvalues.render" ( dict "value" $top.Values.envVarsSecret "context" $ ) }}
              {{- else }}
              {{- range $value := $top.Values.envVarsSecret }}
              - secretRef:
                  name: {{ include "common.tplvalues.render" ( dict "value" $value "context" $ ) }}
              {{- end }}
              {{- end }}
              {{- end }}
            {{- end }}
          {{- if or (eq "true" (include "cronjob.waitForRedis" $top)) (eq "true" (include "cronjob.waitForPostgresql" $top)) }}
          volumes:
            {{- if or (eq "true" (include "cronjob.waitForRedis" $top)) }}
            - name: wait-for-redis
              configMap:
                name: {{ template "common.names.fullname" $top }}-wait-for-redis
                defaultMode: 0777
            {{- end }}
            {{- if or (eq "true" (include "cronjob.waitForPostgresql" $top)) }}
            - name: wait-for-postgresql
              configMap:
                name: {{ template "common.names.fullname" $top }}-wait-for-postgresql
                defaultMode: 0777
            {{- end }}
          {{- end }}
{{- end }}
